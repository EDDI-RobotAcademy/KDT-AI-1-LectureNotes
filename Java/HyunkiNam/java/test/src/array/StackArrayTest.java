package array;

public class StackArrayTest {
    public static void main(String[] args) {
        final int START = 0;

        // 배열을 만드는 방법
        // 1. 데이터 타입을 적고 대괄호[]를 적습니다.
        // 2. 변수 선언하듯 변수 이름을 작성합니다.
        //    당연히 이름이기 때문에 전달력 및 표현력이 중요합니다.
        // 3. 필요하다면 중괄호를 열고 초기화를 하거나 new 데이터타입[] 형태로
        //    Heap에 메모리 할당을 강제할 수 있습니다.
        final int[] numberArray = {1, 2, 3, 4, 5};

        // 여기서 이야기한 Heap과 대조되는 것은 Stack
        // 현재 위 코드는 Stack이라는 지역 변수에 설정하는 배열
        // new를 통해 할당하는 경우엔 Heap이라는 공간에 할당
        // 로우 시스템 개발자가 아니므로 더 깊게 들어갈 필요 X
        // new를 썼기때문에 Heap에 있구나 정도면 OK

        // Stack과 Heap의 차이점은 무엇인가?
        // Stack은 앞의 주사위 문제에서도 봤듯이
        // Loop { final int dat } 형태가 있다면
        // data 변수가 루프마다 초기화되는 것을 볼 수 있음.
        // 이런 지역변수 특성을 가지는 녀석들은 죄다 Stack.

        // 반면 new를 통해 Heap에 설정되는 정보들은 메모리에 상주
        // 그러므로 언제 어디서든 데이터에 접근할 수 있음
        // 자바 개발제에게 있어 둘의 차이점이라면 이 내용이 가장 큰 차이점이라고 볼 수 있음.

        // 결론 : Stack은 중괄호{} 내에서 사용됨
        //       Heap은 new를 통해 사용됨

        // 배열.length 형태로 배열 전체 길이 파악 가능
        for(int i= START; i < numberArray.length; i++){
            // 배열은 메모리 공간상에 순차적으로 배치됨.
            // 메모리 공간이라는 것이 생소하다면
            // 아래와 같이 박스들이 일렬로 나열되어 있는 상황을 생각해도 됨.

            //    0     1     2     3     4   // 5개가 있지만 0 ~ 4로 표현됨
            //  [   ] [   ] [   ] [   ] [   ]

            // 배열의 시작은 0부터라는 것에 주의
            // 우리는 1~100이라고 하면
            // 배열은 0~99임

            // numberArray의 배치도
            //    0     1     2     3     4
            //  [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]
            // numberArray[0] = 1, numberArray[1] = 2, numberArray[2] = 3
            // numberArray[3] = 4, numberArray[4] = 5

            // 위 형태로 동작하여 for 루프에서 i값이 증가함에 따라
            // 모든 배열의 원소들을 출력하게 됨
            System.out.println("배열 출력 : " + numberArray[i]);
        }

        // for의 변형 버전 foreach 라고도 함
        // foreach 사용법
        // 1. 배열의 데이터 타입 작성 (여기선 int)
        // 2. 배열의 원소를 표현할 이름을 적당히 지정 (여기선 num)
        // 3. 콜론 찍기 (:)
        // 4. 정보를 하나씩 꺼내 올 배열 작성 (여기선 numberArray)
        for (int num : numberArray){
            System.out.println("배열 원소 출력 : " + num);
        }

        // 비지니스가 확장됨에 따라 서비스가 커지고
        // 그에 따라 데이터의 규모도 함께 커졌다. (여기선 배열에 정보가 많다고 가정)
        // 이런 상황에서 for(초기화; 조건; 증감)과 foreach가 있다면 누가 더 좋을까?
        // for : 초기화나 조건등이 있어 향후 변경에 유리하다 생각됨
        // foreach : for는 계속 조건식을 검사해야함
        // 이러한 이유때문에 데이터를 요청하면 필요한 정보만 선별해서 전달하게 됨
        // (AWS에서 1000만명 분량의 데이터를 검색 한 번에 가져오면 요금 폭탄 맞음)
        // 그래서 서비스 관점에서 이런 조각 내기 개념으로서 페이징(Paging)이라는 것을 함
        // OS 레벨에서 이야기하는 Paging과는 다른 개념이니 주의!
        // Panging : 데이터 조각내기 관점
    }
}
